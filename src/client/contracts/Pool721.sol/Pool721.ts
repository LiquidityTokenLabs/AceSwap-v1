/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace BasePool {
  export type PoolInfoStruct = {
    spotPrice: PromiseOrValue<BigNumberish>;
    delta: PromiseOrValue<BigNumberish>;
    spread: PromiseOrValue<BigNumberish>;
    buyNum: PromiseOrValue<BigNumberish>;
    sellNum: PromiseOrValue<BigNumberish>;
  };

  export type PoolInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    spotPrice: BigNumber;
    delta: BigNumber;
    spread: BigNumber;
    buyNum: BigNumber;
    sellNum: BigNumber;
  };

  export type UserInfoStruct = {
    initBuyNum: PromiseOrValue<BigNumberish>;
    initSellNum: PromiseOrValue<BigNumberish>;
    initSellAmount: PromiseOrValue<BigNumberish>;
    totalNFTpoint: PromiseOrValue<BigNumberish>;
    totalFTpoint: PromiseOrValue<BigNumberish>;
  };

  export type UserInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    initBuyNum: BigNumber;
    initSellNum: BigNumber;
    initSellAmount: BigNumber;
    totalNFTpoint: BigNumber;
    totalFTpoint: BigNumber;
  };
}

export interface Pool721Interface extends utils.Interface {
  functions: {
    "bondingCurve()": FunctionFragment;
    "buyEventNum()": FunctionFragment;
    "collection()": FunctionFragment;
    "getAllHoldIds()": FunctionFragment;
    "getCalcBuyInfo(uint256,uint256)": FunctionFragment;
    "getCalcSellInfo(uint256,uint256)": FunctionFragment;
    "getPoolInfo()": FunctionFragment;
    "getUserInfo()": FunctionFragment;
    "getUserStakeFee()": FunctionFragment;
    "holdIds(uint256)": FunctionFragment;
    "isOtherStake()": FunctionFragment;
    "isPair()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "poolInfo()": FunctionFragment;
    "protocolFeeRatio()": FunctionFragment;
    "router()": FunctionFragment;
    "sellEventNum()": FunctionFragment;
    "setDelta(uint256)": FunctionFragment;
    "setProtocolFeeRatio(uint256)": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "setSpotPrice(uint256)": FunctionFragment;
    "setSpread(uint256)": FunctionFragment;
    "stakeFT(uint256,address)": FunctionFragment;
    "stakeFTprice()": FunctionFragment;
    "stakeNFT(uint256[],address)": FunctionFragment;
    "stakeNFTprice()": FunctionFragment;
    "swapFTforNFT(uint256[],address)": FunctionFragment;
    "swapNFTforFT(uint256[],uint256,address)": FunctionFragment;
    "totalFee()": FunctionFragment;
    "userInfo()": FunctionFragment;
    "withdrawFT(uint256,uint256[],address)": FunctionFragment;
    "withdrawFee(address)": FunctionFragment;
    "withdrawNFT(uint256[],address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bondingCurve"
      | "buyEventNum"
      | "collection"
      | "getAllHoldIds"
      | "getCalcBuyInfo"
      | "getCalcSellInfo"
      | "getPoolInfo"
      | "getUserInfo"
      | "getUserStakeFee"
      | "holdIds"
      | "isOtherStake"
      | "isPair"
      | "onERC721Received"
      | "owner"
      | "paymentToken"
      | "poolInfo"
      | "protocolFeeRatio"
      | "router"
      | "sellEventNum"
      | "setDelta"
      | "setProtocolFeeRatio"
      | "setRouter"
      | "setSpotPrice"
      | "setSpread"
      | "stakeFT"
      | "stakeFTprice"
      | "stakeNFT"
      | "stakeNFTprice"
      | "swapFTforNFT"
      | "swapNFTforFT"
      | "totalFee"
      | "userInfo"
      | "withdrawFT"
      | "withdrawFee"
      | "withdrawNFT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyEventNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllHoldIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCalcBuyInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCalcSellInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "holdIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOtherStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellEventNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDelta",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpotPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpread",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFTprice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNFT",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNFTprice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFTforNFT",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTforFT",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "totalFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "userInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFT",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyEventNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collection", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllHoldIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCalcBuyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCalcSellInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "holdIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOtherStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellEventNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSpread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeFTprice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeNFTprice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFTforNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTforFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Pool721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Pool721Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bondingCurve(overrides?: CallOverrides): Promise<[string]>;

    buyEventNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    collection(overrides?: CallOverrides): Promise<[string]>;

    getAllHoldIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getCalcBuyInfo(
      _itemNum: PromiseOrValue<BigNumberish>,
      _spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCalcSellInfo(
      _itemNum: PromiseOrValue<BigNumberish>,
      _spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<[BasePool.PoolInfoStructOutput]>;

    getUserInfo(
      overrides?: CallOverrides
    ): Promise<[BasePool.UserInfoStructOutput]>;

    getUserStakeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    holdIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isOtherStake(overrides?: CallOverrides): Promise<[boolean]>;

    isPair(overrides?: CallOverrides): Promise<[boolean]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        spotPrice: BigNumber;
        delta: BigNumber;
        spread: BigNumber;
        buyNum: BigNumber;
        sellNum: BigNumber;
      }
    >;

    protocolFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    sellEventNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDelta(
      _newDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeRatio(
      _newProtocolFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouter(
      _newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpotPrice(
      _newSpotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSpread(
      _newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeFT(
      _itemNum: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeFTprice(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeNFTprice(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapFTforNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNFTforFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _minExpectFee: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initBuyNum: BigNumber;
        initSellNum: BigNumber;
        initSellAmount: BigNumber;
        totalNFTpoint: BigNumber;
        totalFTpoint: BigNumber;
      }
    >;

    withdrawFT(
      _userSellNum: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bondingCurve(overrides?: CallOverrides): Promise<string>;

  buyEventNum(overrides?: CallOverrides): Promise<BigNumber>;

  collection(overrides?: CallOverrides): Promise<string>;

  getAllHoldIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getCalcBuyInfo(
    _itemNum: PromiseOrValue<BigNumberish>,
    _spotPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCalcSellInfo(
    _itemNum: PromiseOrValue<BigNumberish>,
    _spotPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    overrides?: CallOverrides
  ): Promise<BasePool.PoolInfoStructOutput>;

  getUserInfo(
    overrides?: CallOverrides
  ): Promise<BasePool.UserInfoStructOutput>;

  getUserStakeFee(overrides?: CallOverrides): Promise<BigNumber>;

  holdIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isOtherStake(overrides?: CallOverrides): Promise<boolean>;

  isPair(overrides?: CallOverrides): Promise<boolean>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  poolInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      spotPrice: BigNumber;
      delta: BigNumber;
      spread: BigNumber;
      buyNum: BigNumber;
      sellNum: BigNumber;
    }
  >;

  protocolFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  sellEventNum(overrides?: CallOverrides): Promise<BigNumber>;

  setDelta(
    _newDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeRatio(
    _newProtocolFeeRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouter(
    _newRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpotPrice(
    _newSpotPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSpread(
    _newSpread: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeFT(
    _itemNum: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeFTprice(overrides?: CallOverrides): Promise<BigNumber>;

  stakeNFT(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeNFTprice(overrides?: CallOverrides): Promise<BigNumber>;

  swapFTforNFT(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _user: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNFTforFT(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _minExpectFee: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalFee(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      initBuyNum: BigNumber;
      initSellNum: BigNumber;
      initSellAmount: BigNumber;
      totalNFTpoint: BigNumber;
      totalFTpoint: BigNumber;
    }
  >;

  withdrawFT(
    _userSellNum: PromiseOrValue<BigNumberish>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _user: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    _user: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNFT(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _user: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bondingCurve(overrides?: CallOverrides): Promise<string>;

    buyEventNum(overrides?: CallOverrides): Promise<BigNumber>;

    collection(overrides?: CallOverrides): Promise<string>;

    getAllHoldIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getCalcBuyInfo(
      _itemNum: PromiseOrValue<BigNumberish>,
      _spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCalcSellInfo(
      _itemNum: PromiseOrValue<BigNumberish>,
      _spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      overrides?: CallOverrides
    ): Promise<BasePool.PoolInfoStructOutput>;

    getUserInfo(
      overrides?: CallOverrides
    ): Promise<BasePool.UserInfoStructOutput>;

    getUserStakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    holdIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOtherStake(overrides?: CallOverrides): Promise<boolean>;

    isPair(overrides?: CallOverrides): Promise<boolean>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    poolInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        spotPrice: BigNumber;
        delta: BigNumber;
        spread: BigNumber;
        buyNum: BigNumber;
        sellNum: BigNumber;
      }
    >;

    protocolFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    sellEventNum(overrides?: CallOverrides): Promise<BigNumber>;

    setDelta(
      _newDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFeeRatio(
      _newProtocolFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouter(
      _newRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpotPrice(
      _newSpotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpread(
      _newSpread: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFT(
      _itemNum: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFTprice(overrides?: CallOverrides): Promise<BigNumber>;

    stakeNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeNFTprice(overrides?: CallOverrides): Promise<BigNumber>;

    swapFTforNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTforFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _minExpectFee: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        initBuyNum: BigNumber;
        initSellNum: BigNumber;
        initSellAmount: BigNumber;
        totalNFTpoint: BigNumber;
        totalFTpoint: BigNumber;
      }
    >;

    withdrawFT(
      _userSellNum: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bondingCurve(overrides?: CallOverrides): Promise<BigNumber>;

    buyEventNum(overrides?: CallOverrides): Promise<BigNumber>;

    collection(overrides?: CallOverrides): Promise<BigNumber>;

    getAllHoldIds(overrides?: CallOverrides): Promise<BigNumber>;

    getCalcBuyInfo(
      _itemNum: PromiseOrValue<BigNumberish>,
      _spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCalcSellInfo(
      _itemNum: PromiseOrValue<BigNumberish>,
      _spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakeFee(overrides?: CallOverrides): Promise<BigNumber>;

    holdIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOtherStake(overrides?: CallOverrides): Promise<BigNumber>;

    isPair(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    sellEventNum(overrides?: CallOverrides): Promise<BigNumber>;

    setDelta(
      _newDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFeeRatio(
      _newProtocolFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouter(
      _newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpotPrice(
      _newSpotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSpread(
      _newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeFT(
      _itemNum: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeFTprice(overrides?: CallOverrides): Promise<BigNumber>;

    stakeNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeNFTprice(overrides?: CallOverrides): Promise<BigNumber>;

    swapFTforNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNFTforFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _minExpectFee: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFT(
      _userSellNum: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bondingCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyEventNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllHoldIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCalcBuyInfo(
      _itemNum: PromiseOrValue<BigNumberish>,
      _spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCalcSellInfo(
      _itemNum: PromiseOrValue<BigNumberish>,
      _spotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStakeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holdIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOtherStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellEventNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDelta(
      _newDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeRatio(
      _newProtocolFeeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouter(
      _newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpotPrice(
      _newSpotPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSpread(
      _newSpread: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeFT(
      _itemNum: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeFTprice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeNFTprice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapFTforNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTforFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _minExpectFee: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFT(
      _userSellNum: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _user: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
