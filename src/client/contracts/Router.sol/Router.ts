/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Router {
  export type InputStruct = { tokenIds: PromiseOrValue<BigNumberish>[] };

  export type InputStructOutput = [BigNumber[]] & { tokenIds: BigNumber[] };
}

export interface RouterInterface extends utils.Interface {
  functions: {
    "batchStakeFT(address[],uint256[])": FunctionFragment;
    "batchStakeNFT(address[],(uint256[])[])": FunctionFragment;
    "batchSwapFTforNFT(address[],(uint256[])[],address)": FunctionFragment;
    "batchSwapNFTforFT(address[],(uint256[])[],uint256[],address)": FunctionFragment;
    "bondingCurveList(uint256)": FunctionFragment;
    "collectionList(uint256)": FunctionFragment;
    "getBondingCurveList()": FunctionFragment;
    "getCollectionList()": FunctionFragment;
    "getCollectionPoolList(address)": FunctionFragment;
    "getIsBondingCurveApprove(address)": FunctionFragment;
    "getIsCollectionApprove(address)": FunctionFragment;
    "getIsFactoryApprove(address)": FunctionFragment;
    "getIsSupporterApprove(address)": FunctionFragment;
    "getUserStakeFTPoolList(address)": FunctionFragment;
    "getUserStakeNFTPoolList(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBondingCurveApprove(address,bool)": FunctionFragment;
    "setCollectionApprove(address,bool)": FunctionFragment;
    "setCollectionPoolList(address,bool,bool)": FunctionFragment;
    "setFactory(address,bool)": FunctionFragment;
    "setPoolRouter(address,address)": FunctionFragment;
    "setSupporterApprove(address,bool)": FunctionFragment;
    "stakeFT(address,uint256)": FunctionFragment;
    "stakeNFT(address,uint256[])": FunctionFragment;
    "supporterFeeRatio()": FunctionFragment;
    "swapFTforNFT(address,uint256[],address)": FunctionFragment;
    "swapNFTforFT(address,uint256[],uint256,address)": FunctionFragment;
    "totalFee()": FunctionFragment;
    "totalProtocolFee()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFT(address,uint256,uint256[])": FunctionFragment;
    "withdrawNFT(address,uint256[])": FunctionFragment;
    "withdrawProtocolFee()": FunctionFragment;
    "withdrawSupportFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchStakeFT"
      | "batchStakeNFT"
      | "batchSwapFTforNFT"
      | "batchSwapNFTforFT"
      | "bondingCurveList"
      | "collectionList"
      | "getBondingCurveList"
      | "getCollectionList"
      | "getCollectionPoolList"
      | "getIsBondingCurveApprove"
      | "getIsCollectionApprove"
      | "getIsFactoryApprove"
      | "getIsSupporterApprove"
      | "getUserStakeFTPoolList"
      | "getUserStakeNFTPoolList"
      | "owner"
      | "renounceOwnership"
      | "setBondingCurveApprove"
      | "setCollectionApprove"
      | "setCollectionPoolList"
      | "setFactory"
      | "setPoolRouter"
      | "setSupporterApprove"
      | "stakeFT"
      | "stakeNFT"
      | "supporterFeeRatio"
      | "swapFTforNFT"
      | "swapNFTforFT"
      | "totalFee"
      | "totalProtocolFee"
      | "transferOwnership"
      | "withdrawFT"
      | "withdrawNFT"
      | "withdrawProtocolFee"
      | "withdrawSupportFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchStakeFT",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchStakeNFT",
    values: [PromiseOrValue<string>[], Router.InputStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapFTforNFT",
    values: [
      PromiseOrValue<string>[],
      Router.InputStruct[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSwapNFTforFT",
    values: [
      PromiseOrValue<string>[],
      Router.InputStruct[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingCurveList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondingCurveList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionPoolList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsBondingCurveApprove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsCollectionApprove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsFactoryApprove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsSupporterApprove",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeFTPoolList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeNFTPoolList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingCurveApprove",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionApprove",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollectionPoolList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolRouter",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupporterApprove",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supporterFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFTforNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTforFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "totalFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSupportFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "batchStakeFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchStakeNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapFTforNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSwapNFTforFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurveList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondingCurveList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionPoolList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsBondingCurveApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsCollectionApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsFactoryApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsSupporterApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeFTPoolList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeNFTPoolList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingCurveApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollectionPoolList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupporterApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supporterFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFTforNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTforFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSupportFee",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Received(address,uint256)": EventFragment;
    "StakeFT(address,address,uint256,uint256)": EventFragment;
    "StakeNFT(address,address,uint256,uint256[])": EventFragment;
    "SwapFTforNFT(address,address,uint256[],uint256,address)": EventFragment;
    "SwapNFTforFT(address,address,uint256[],uint256,address)": EventFragment;
    "WithdrawFT(address,address,uint256[],uint256,uint256,uint256)": EventFragment;
    "WithdrawNFT(address,address,uint256[],uint256,uint256)": EventFragment;
    "updateBondingCurve(address,bool)": EventFragment;
    "updateCollection(address,bool)": EventFragment;
    "updatePool(address,address,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFTforNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapNFTforFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updateBondingCurve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updateCollection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updatePool"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReceivedEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface StakeFTEventObject {
  user: string;
  pool: string;
  userNum: BigNumber;
  userAmount: BigNumber;
}
export type StakeFTEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  StakeFTEventObject
>;

export type StakeFTEventFilter = TypedEventFilter<StakeFTEvent>;

export interface StakeNFTEventObject {
  user: string;
  pool: string;
  userNum: BigNumber;
  tokenIds: BigNumber[];
}
export type StakeNFTEvent = TypedEvent<
  [string, string, BigNumber, BigNumber[]],
  StakeNFTEventObject
>;

export type StakeNFTEventFilter = TypedEventFilter<StakeNFTEvent>;

export interface SwapFTforNFTEventObject {
  user: string;
  pool: string;
  tokenIds: BigNumber[];
  totalFee: BigNumber;
  support: string;
}
export type SwapFTforNFTEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber, string],
  SwapFTforNFTEventObject
>;

export type SwapFTforNFTEventFilter = TypedEventFilter<SwapFTforNFTEvent>;

export interface SwapNFTforFTEventObject {
  user: string;
  pool: string;
  tokenIds: BigNumber[];
  totalFee: BigNumber;
  support: string;
}
export type SwapNFTforFTEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber, string],
  SwapNFTforFTEventObject
>;

export type SwapNFTforFTEventFilter = TypedEventFilter<SwapNFTforFTEvent>;

export interface WithdrawFTEventObject {
  user: string;
  pool: string;
  tokenIds: BigNumber[];
  userNum: BigNumber;
  userAmount: BigNumber;
  userFee: BigNumber;
}
export type WithdrawFTEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber, BigNumber, BigNumber],
  WithdrawFTEventObject
>;

export type WithdrawFTEventFilter = TypedEventFilter<WithdrawFTEvent>;

export interface WithdrawNFTEventObject {
  user: string;
  pool: string;
  tokenIds: BigNumber[];
  userNum: BigNumber;
  userFee: BigNumber;
}
export type WithdrawNFTEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber, BigNumber],
  WithdrawNFTEventObject
>;

export type WithdrawNFTEventFilter = TypedEventFilter<WithdrawNFTEvent>;

export interface updateBondingCurveEventObject {
  bondingCurve: string;
  approve: boolean;
}
export type updateBondingCurveEvent = TypedEvent<
  [string, boolean],
  updateBondingCurveEventObject
>;

export type updateBondingCurveEventFilter =
  TypedEventFilter<updateBondingCurveEvent>;

export interface updateCollectionEventObject {
  collection: string;
  approve: boolean;
}
export type updateCollectionEvent = TypedEvent<
  [string, boolean],
  updateCollectionEventObject
>;

export type updateCollectionEventFilter =
  TypedEventFilter<updateCollectionEvent>;

export interface updatePoolEventObject {
  collection: string;
  pool: string;
  approve: boolean;
  isOtherStake: boolean;
}
export type updatePoolEvent = TypedEvent<
  [string, string, boolean, boolean],
  updatePoolEventObject
>;

export type updatePoolEventFilter = TypedEventFilter<updatePoolEvent>;

export interface Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchStakeFT(
      _poolList: PromiseOrValue<string>[],
      _userSellNumList: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchStakeNFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchSwapFTforNFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchSwapNFTforFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      _minExpects: PromiseOrValue<BigNumberish>[],
      _support: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bondingCurveList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collectionList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBondingCurveList(overrides?: CallOverrides): Promise<[string[]]>;

    getCollectionList(overrides?: CallOverrides): Promise<[string[]]>;

    getCollectionPoolList(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getIsBondingCurveApprove(
      _bondingCurve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsCollectionApprove(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsFactoryApprove(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getIsSupporterApprove(
      _supporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserStakeFTPoolList(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserStakeNFTPoolList(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBondingCurveApprove(
      _bondingCurve: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionApprove(
      _collection: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollectionPoolList(
      _pool: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      _isOtherStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolRouter(
      _pool: PromiseOrValue<string>,
      _newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSupporterApprove(
      _supporter: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeFT(
      _pool: PromiseOrValue<string>,
      _userSellNum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supporterFeeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapFTforNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNFTforFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _minExpectFee: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFT(
      _pool: PromiseOrValue<string>,
      _userSellNum: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawProtocolFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawSupportFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  batchStakeFT(
    _poolList: PromiseOrValue<string>[],
    _userSellNumList: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchStakeNFT(
    _poolList: PromiseOrValue<string>[],
    InputArray: Router.InputStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchSwapFTforNFT(
    _poolList: PromiseOrValue<string>[],
    InputArray: Router.InputStruct[],
    _support: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchSwapNFTforFT(
    _poolList: PromiseOrValue<string>[],
    InputArray: Router.InputStruct[],
    _minExpects: PromiseOrValue<BigNumberish>[],
    _support: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bondingCurveList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  collectionList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBondingCurveList(overrides?: CallOverrides): Promise<string[]>;

  getCollectionList(overrides?: CallOverrides): Promise<string[]>;

  getCollectionPoolList(
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getIsBondingCurveApprove(
    _bondingCurve: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsCollectionApprove(
    _collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsFactoryApprove(
    _factory: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getIsSupporterApprove(
    _supporter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserStakeFTPoolList(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserStakeNFTPoolList(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBondingCurveApprove(
    _bondingCurve: PromiseOrValue<string>,
    _approve: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionApprove(
    _collection: PromiseOrValue<string>,
    _approve: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollectionPoolList(
    _pool: PromiseOrValue<string>,
    _approve: PromiseOrValue<boolean>,
    _isOtherStake: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    _factory: PromiseOrValue<string>,
    _approve: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolRouter(
    _pool: PromiseOrValue<string>,
    _newRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSupporterApprove(
    _supporter: PromiseOrValue<string>,
    _approve: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeFT(
    _pool: PromiseOrValue<string>,
    _userSellNum: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeNFT(
    _pool: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supporterFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  swapFTforNFT(
    _pool: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _support: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNFTforFT(
    _pool: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _minExpectFee: PromiseOrValue<BigNumberish>,
    _support: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFT(
    _pool: PromiseOrValue<string>,
    _userSellNum: PromiseOrValue<BigNumberish>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNFT(
    _pool: PromiseOrValue<string>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawProtocolFee(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawSupportFee(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    batchStakeFT(
      _poolList: PromiseOrValue<string>[],
      _userSellNumList: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchStakeNFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchSwapFTforNFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      _support: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchSwapNFTforFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      _minExpects: PromiseOrValue<BigNumberish>[],
      _support: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bondingCurveList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    collectionList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBondingCurveList(overrides?: CallOverrides): Promise<string[]>;

    getCollectionList(overrides?: CallOverrides): Promise<string[]>;

    getCollectionPoolList(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getIsBondingCurveApprove(
      _bondingCurve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsCollectionApprove(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsFactoryApprove(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getIsSupporterApprove(
      _supporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserStakeFTPoolList(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserStakeNFTPoolList(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBondingCurveApprove(
      _bondingCurve: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionApprove(
      _collection: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollectionPoolList(
      _pool: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      _isOtherStake: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(
      _factory: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolRouter(
      _pool: PromiseOrValue<string>,
      _newRouter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSupporterApprove(
      _supporter: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFT(
      _pool: PromiseOrValue<string>,
      _userSellNum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supporterFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    swapFTforNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _support: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapNFTforFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _minExpectFee: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFT(
      _pool: PromiseOrValue<string>,
      _userSellNum: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProtocolFee(overrides?: CallOverrides): Promise<void>;

    withdrawSupportFee(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Received(address,uint256)"(arg0?: null, arg1?: null): ReceivedEventFilter;
    Received(arg0?: null, arg1?: null): ReceivedEventFilter;

    "StakeFT(address,address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      userNum?: null,
      userAmount?: null
    ): StakeFTEventFilter;
    StakeFT(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      userNum?: null,
      userAmount?: null
    ): StakeFTEventFilter;

    "StakeNFT(address,address,uint256,uint256[])"(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      userNum?: null,
      tokenIds?: null
    ): StakeNFTEventFilter;
    StakeNFT(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      userNum?: null,
      tokenIds?: null
    ): StakeNFTEventFilter;

    "SwapFTforNFT(address,address,uint256[],uint256,address)"(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenIds?: null,
      totalFee?: null,
      support?: null
    ): SwapFTforNFTEventFilter;
    SwapFTforNFT(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenIds?: null,
      totalFee?: null,
      support?: null
    ): SwapFTforNFTEventFilter;

    "SwapNFTforFT(address,address,uint256[],uint256,address)"(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenIds?: null,
      totalFee?: null,
      support?: null
    ): SwapNFTforFTEventFilter;
    SwapNFTforFT(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenIds?: null,
      totalFee?: null,
      support?: null
    ): SwapNFTforFTEventFilter;

    "WithdrawFT(address,address,uint256[],uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenIds?: null,
      userNum?: null,
      userAmount?: null,
      userFee?: null
    ): WithdrawFTEventFilter;
    WithdrawFT(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenIds?: null,
      userNum?: null,
      userAmount?: null,
      userFee?: null
    ): WithdrawFTEventFilter;

    "WithdrawNFT(address,address,uint256[],uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenIds?: null,
      userNum?: null,
      userFee?: null
    ): WithdrawNFTEventFilter;
    WithdrawNFT(
      user?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      tokenIds?: null,
      userNum?: null,
      userFee?: null
    ): WithdrawNFTEventFilter;

    "updateBondingCurve(address,bool)"(
      bondingCurve?: PromiseOrValue<string> | null,
      approve?: null
    ): updateBondingCurveEventFilter;
    updateBondingCurve(
      bondingCurve?: PromiseOrValue<string> | null,
      approve?: null
    ): updateBondingCurveEventFilter;

    "updateCollection(address,bool)"(
      collection?: PromiseOrValue<string> | null,
      approve?: null
    ): updateCollectionEventFilter;
    updateCollection(
      collection?: PromiseOrValue<string> | null,
      approve?: null
    ): updateCollectionEventFilter;

    "updatePool(address,address,bool,bool)"(
      collection?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      approve?: null,
      isOtherStake?: null
    ): updatePoolEventFilter;
    updatePool(
      collection?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      approve?: null,
      isOtherStake?: null
    ): updatePoolEventFilter;
  };

  estimateGas: {
    batchStakeFT(
      _poolList: PromiseOrValue<string>[],
      _userSellNumList: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchStakeNFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchSwapFTforNFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchSwapNFTforFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      _minExpects: PromiseOrValue<BigNumberish>[],
      _support: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bondingCurveList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondingCurveList(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectionList(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectionPoolList(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsBondingCurveApprove(
      _bondingCurve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsCollectionApprove(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsFactoryApprove(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsSupporterApprove(
      _supporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakeFTPoolList(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakeNFTPoolList(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBondingCurveApprove(
      _bondingCurve: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionApprove(
      _collection: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollectionPoolList(
      _pool: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      _isOtherStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactory(
      _factory: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolRouter(
      _pool: PromiseOrValue<string>,
      _newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSupporterApprove(
      _supporter: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeFT(
      _pool: PromiseOrValue<string>,
      _userSellNum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supporterFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    swapFTforNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNFTforFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _minExpectFee: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFT(
      _pool: PromiseOrValue<string>,
      _userSellNum: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawProtocolFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawSupportFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    batchStakeFT(
      _poolList: PromiseOrValue<string>[],
      _userSellNumList: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchStakeNFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapFTforNFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchSwapNFTforFT(
      _poolList: PromiseOrValue<string>[],
      InputArray: Router.InputStruct[],
      _minExpects: PromiseOrValue<BigNumberish>[],
      _support: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bondingCurveList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondingCurveList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollectionPoolList(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsBondingCurveApprove(
      _bondingCurve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsCollectionApprove(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsFactoryApprove(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsSupporterApprove(
      _supporter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakeFTPoolList(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakeNFTPoolList(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBondingCurveApprove(
      _bondingCurve: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionApprove(
      _collection: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollectionPoolList(
      _pool: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      _isOtherStake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolRouter(
      _pool: PromiseOrValue<string>,
      _newRouter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSupporterApprove(
      _supporter: PromiseOrValue<string>,
      _approve: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeFT(
      _pool: PromiseOrValue<string>,
      _userSellNum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supporterFeeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapFTforNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTforFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _minExpectFee: PromiseOrValue<BigNumberish>,
      _support: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFT(
      _pool: PromiseOrValue<string>,
      _userSellNum: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNFT(
      _pool: PromiseOrValue<string>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawProtocolFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawSupportFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
